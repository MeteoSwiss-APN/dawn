##===------------------------------------------------------------------------------*- CMake -*-===##
##                          _
##                         | |
##                       __| | __ ___      ___ ___
##                      / _` |/ _` \ \ /\ / / '_  |
##                     | (_| | (_| |\ V  V /| | | |
##                      \__,_|\__,_| \_/\_/ |_| |_| - Compiler Toolchain
##
##
##  This file is distributed under the MIT License (MIT).
##  See LICENSE.txt for details.
##
##===------------------------------------------------------------------------------------------===##

@PACKAGE_INIT@

# Root directory of the installation
get_filename_component(DAWN_ROOT "@PACKAGE_DAWN_INSTALL_ROOT@" ABSOLUTE)
list(APPEND CMAKE_MODULE_PATH "${DAWN_ROOT}/cmake/modules")

# Import protobuf
if(NOT ZLIB_FOUND)
  find_package(ZLIB)
endif()

if(NOT Protobuf_FOUND)
  if(NOT Protobuf_DIR)
    set(Protobuf_DIR "@DAWN_CONFIGURE_PROTOBUF_ROOT@/lib/cmake/protobuf")
  endif()
  find_package(Protobuf @DAWN_CONFIGURE_PROTOBUF_VERSION@ NO_MODULE REQUIRED)
else()
  if(${Protobuf_VERSION} VERSION_LESS "@DAWN_CONFIGURE_PROTOBUF_VERSION@")
    message(FATAL_ERROR
      "Dawn was compiled with Protobuf (@DAWN_CONFIGURE_PROTOBUF_VERSION@), already found (${Protobuf_VERSION})")
  endif()
endif()

# Dawn include directories
set(DAWN_INCLUDE_DIRS "")
foreach(_include_dir "@PACKAGE_DAWN_CONFIGURE_INCLUDE_DIR@" "@PACKAGE_DAWN_CONFIGURE_EXTERNAL_INCLUDE_DIR@" "@PACKAGE_DAWN_CONFIGURE_GENERATED_INCLUDE_DIR@" "@DAWN_CONFIGURE_PROTOBUF_ROOT@/include")
    set_and_check(_include_dir ${_include_dir})
    list(APPEND DAWN_INCLUDE_DIRS ${_include_dir})
endforeach()

# Link directories for Dawn libraries
set_and_check(DAWN_LIBRARY_DIRS "@PACKAGE_DAWN_CONFIGURE_LIB_DIR@")

# Was Dawn compiled with asserts?
set(DAWN_ASSERTS @DAWN_ASSERTS@)

# Import Dawn library targets (DawnStatic and DawnShared)
include("@PACKAGE_DAWN_CONFIGURE_CMAKE_DIR@/DawnTargets.cmake")

set(DAWN_HAS_SHARED_LIBRARY FALSE)
if(TARGET Dawn::DawnShared)
  set(DAWN_HAS_SHARED_LIBRARY TRUE)
endif()

# Aliases
set(DAWN_VERSION ${Dawn_VERSION})
set(DAWN_FOUND 1)
set(DAWN_STATIC_LIBRARY Dawn::DawnStatic)
set(DAWN_LIBRARY ${DAWN_STATIC_LIBRARY})
set(DAWN_LIBRARIES ${DAWN_LIBRARY})
set(DAWN_RPATH_DIR "${DAWN_LIBRARY_DIRS};@DAWN_PROTOBUF_RPATH_DIR@")

# Report findings
message(STATUS "Found Dawn version: ${DAWN_VERSION}")

get_property(_static_lib TARGET Dawn::DawnStatic PROPERTY LOCATION)
message(STATUS "  Static: ${_static_lib}")

if(DAWN_HAS_SHARED_LIBRARY)
  set(DAWN_SHARED_LIBRARY Dawn::DawnShared)
  get_property(_shared_lib TARGET Dawn::DawnShared PROPERTY LOCATION)
  message(STATUS "  Shared: ${_shared_lib}")
endif()

set(DAWN_OPTIONS "@DAWN_OPTIONS@")
if("${DAWN_OPTIONS}" STREQUAL "")
  message(FATAL_ERROR "DAWN_OPTIONS not set")
endif()
