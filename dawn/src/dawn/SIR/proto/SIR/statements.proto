/*===------------------------------------------------------------------------------*- proto -*-===*\
 *                          _
 *                         | |
 *                       __| | __ ___      ___ ___
 *                      / _` |/ _` \ \ /\ / / '_  |
 *                     | (_| | (_| |\ V  V /| | | |
 *                      \__,_|\__,_| \_/\_/ |_| |_| - Compiler Toolchain
 *
 *
 *  This file is distributed under the MIT License (MIT).
 *  See LICENSE.txt for details.
 *
\*===------------------------------------------------------------------------------------------===*/

// @defgroup sir_proto SIR protobuf
// @brief This is a SIR description using Google's protocol buffers library
// <a href="https://developers.google.com/protocol-buffers/">Protobuf</a>.

syntax = "proto3";
package dawn.proto.statements;
import "SIR/enums.proto";

import "google/protobuf/wrappers.proto";

// @brief Source information
//
// `(-1,-1)` indicates an invalid location.
// @ingroup sir_proto
message SourceLocation {
  int32 Line = 1;   // Source line
  int32 Column = 2; // Column in the `Line`
}

// @brief Cartesian horizontal dimension of a field
//
// For a cartesian grid we enable/disable the I and J components through their respective masks.
// @ingroup sir_proto
message CartesianDimension {
  int32 mask_cart_i = 1;                 // mask for cartesian component i
  int32 mask_cart_j = 2;                 // mask for cartesian component j
}

// @brief Unstructured horizontal dimension of a field
//
// For a unstructured grid we need to specify the dense location type.
// It could also have a sparse dimension. In such case the sparse part is non-empty.
// @ingroup sir_proto
message UnstructuredDimension {
  dawn.proto.enums.LocationType dense_location_type = 1; // dense location type
  repeated dawn.proto.enums.LocationType sparse_part = 2;   // neighbor chain encoding sparse part when the field has a sparse dimension
}

// @brief Dimensions spanned by a field
// 
// This is a condensed representation of the dimensions of a field. 
// A field has a vertical component iff maskK=1. 
// On the horizontal we distinguish between cartesian and unstructured grids. 
// @ingroup sir_proto
message FieldDimensions {
  oneof horizontal_dimension {
    CartesianDimension cartesian_horizontal_dimension = 1;
    UnstructuredDimension unstructured_horizontal_dimension = 2;
  }

  int32 mask_k = 3;                        // mask for vertical dimension
}

// @brief Description of a field argument of a Stencil or StencilFunction
// @ingroup sir_proto
message Field {
  string name = 1;                     // Name of the field
  SourceLocation loc = 2;              // Source location
  bool is_temporary = 3;               // Is the field a temporary?
  FieldDimensions field_dimensions = 4; // Dimensions spanned by the field
}

// @brief Directional argument of a StencilFunction
//
// Note that this message is merely a placeholder as the actual arguments is encoded as an AST node.
// @ingroup sir_proto
message Direction {
  string name = 1;        // Name of the directional argument
  SourceLocation loc = 2; // Source location
}

// @brief Offset argument of a StencilFunction
//
// Note that this message is merely a placeholder as the actual arguments is encoded as an AST node.
// @ingroup sir_proto
message Offset {
  string name = 1;        // Name of the offset argument
  SourceLocation loc = 2; // Source location
}

// @brief Directional argument of a StencilFunction
// @ingroup sir_proto
message StencilFunctionArg {
  // One of Field, Direction or Offset
  oneof Arg {
    Field field_value = 1;
    Direction direction_value = 2;
    Offset offset_value = 3;
  }
}

// @brief Representation of a vertical interval, given by a lower and upper bound where a bound
// is represented by a level and an offset (`bound = level + offset`)
//
// The Interval has to satisfy the following invariants:
//  - `lower_level >= Interval::Start`
//  - `upper_level <= Interval::End`
//  - `(lower_level + lower_offset) <= (upper_level + upper_offset)`
//
// @ingroup sir_proto
message Interval {
  // Indication of a special level
  enum SpecialLevel {
    Start = 0; // The first level
    End = 1;   // The last level
  }

  // Lower level
  //
  // A level can be any integer between `[Start, End]` while the `Start` and `End` levels are
  // treated specially.
  oneof LowerLevel {
    SpecialLevel special_lower_level = 1;
    int32 lower_level = 2;
  }

  // Upper level
  //
  // A level can be any integer between `[Start, End]` while the `Start` and `End` levels are
  // treated specially.
  oneof UpperLevel {
    SpecialLevel special_upper_level = 3;
    int32 upper_level = 4;
  }

  int32 lower_offset = 5; // Lower offset added to `lower_level`
  int32 upper_offset = 6; // Upper offset added to `upper_level`
}

// @brief Supported builtin types
// @ingroup sir_proto
message BuiltinType {
  enum TypeID {
    Invalid = 0;
    Auto = 1;
    Boolean = 2;
    Integer = 3;
    Float = 4;
    Double = 5;
  }

  TypeID type_id = 1; // Type identifier
}

// @brief Supported builtin types
// @ingroup sir_proto
message Dimension {
  enum Direction {
    I = 0;
    J = 1;
    K = 2;
    Invalid = 3;
  }

  Direction direction = 1; // Dimension identifier
}

// @brief Supported builtin types
// @ingroup sir_proto
message Type {
  // Underlying type (either a custom type given by `name` or a `BuiltinType`)
  oneof type {
    string name = 1;              // Name of the custom type
    BuiltinType builtin_type = 2; // ID of the builtin type
  }

  bool is_const = 3;    // Is the type const qualified?
  bool is_volatile = 4; // Is the type volatile qualified?
}

// @brief Declaration of a vertical region
// @ingroup sir_proto
message VerticalRegion {
  enum LoopOrder {
    Forward = 0;
    Backward = 1;
  }

  SourceLocation loc = 1;   // Source location of the vertical region
  AST ast = 2;              // Syntax tree of the body of the vertical region
  Interval interval = 3;    // Vertical interval
  LoopOrder loop_order = 4; // Loop order of execution
  Interval i_range = 5;     // Global index space in the I dimension
  Interval j_range = 6;     // Global index space in the J dimension
}

// @brief Stencil call declaration
// @ingroup sir_proto
message StencilCall {
  SourceLocation loc = 1;        // Source location of the stencil call
  string callee = 2;             // Name of the called stencil (i.e callee)
  repeated string arguments = 3; // Fields passed as arguments during the stencil call
}

/* ===-----------------------------------------------------------------------------------------===*/
//      Accesses
/* ===-----------------------------------------------------------------------------------------===*/
// @brief Extent attached to a FieldAccess
//
// Each filed-access has extents in each dimension that define how far the accesses are in the
// respective dimension
message Extent {
  int32 minus = 1;
  int32 plus = 2;
}
message CartesianExtent {
  Extent i_extent = 1;
  Extent j_extent = 2;
}
message UnstructuredExtent { bool has_extent = 1; }
message ZeroExtent {}

message Extents {
  // the three dimensions of an access-extent [Extent<i>, Extent<j>, Extent<k>]
  oneof horizontal_extent {
    CartesianExtent cartesian_extent = 1;
    UnstructuredExtent unstructured_extent = 2;
    ZeroExtent zero_extent = 3;
  }
  Extent vertical_extent = 4;
}

message Accesses {
  // Map of all the write accesses [their accessID] to the Extents of the access
  map<int32, Extents> writeAccess = 1;

  // Map of all the read accesses [their accessID] to the Extents of the access
  map<int32, Extents> readAccess = 2;
}

/*===------------------------------------------------------------------------------------------===*\
 *     AST
\*===------------------------------------------------------------------------------------------===*/

// @brief Data of Stmts
//
// @ingroup sir_proto
message StmtData {
  Accesses accesses = 1; // All the accesses of the statement
}

// @brief This is a union of all the statements
// @ingroup sir_proto
message Stmt {
  oneof stmt {
    BlockStmt block_stmt = 1;
    ExprStmt expr_stmt = 2;
    ReturnStmt return_stmt = 3;
    VarDeclStmt var_decl_stmt = 4;
    StencilCallDeclStmt stencil_call_decl_stmt = 5;
    VerticalRegionDeclStmt vertical_region_decl_stmt = 6;
    BoundaryConditionDeclStmt boundary_condition_decl_stmt = 7;
    IfStmt if_stmt = 8;
  }
}

// @brief This is a union of all the expressions
// @ingroup sir_proto
message Expr {
  oneof expr {
    UnaryOperator unary_operator = 1;
    BinaryOperator binary_operator = 2;
    AssignmentExpr assignment_expr = 3;
    TernaryOperator ternary_operator = 4;
    FunCallExpr fun_call_expr = 5;
    StencilFunCallExpr stencil_fun_call_expr = 6;
    StencilFunArgExpr stencil_fun_arg_expr = 7;
    VarAccessExpr var_access_expr = 8;
    FieldAccessExpr field_access_expr = 9;
    LiteralAccessExpr literal_access_expr = 10;
    ReductionOverNeighborExpr reduction_over_neighbor_expr = 11;
  }
}

// @brief A block of `N` statetements
//
// Synopsis
// @code{.cpp}
// {
//  statement_1
//  statement_2
//  ...
//  statement_N
// }
// @endcode
// @ingroup sir_proto
message BlockStmt {
  repeated Stmt statements = 1; // List of statements
  SourceLocation loc = 2;       // Source location
  StmtData data = 3;            // Generic Stmt's data container
  int32 ID = 4;                 // ID of the Stmt
}

// @brief A statement wrapping an expression
//
// @ingroup sir_proto
message ExprStmt {
  Expr expr = 1;          // Expression
  SourceLocation loc = 2; // Source location
  StmtData data = 3;      // Generic Stmt's data container
  int32 ID = 4;           // ID of the Stmt
}

// @brief Return statement
//
// @ingroup sir_proto
message ReturnStmt {
  Expr expr = 1;          // Expression to return
  SourceLocation loc = 2; // Source location
  StmtData data = 3;      // Generic Stmt's data container
  int32 ID = 4;           // ID of the Stmt
}

// @brief Data of a VarDeclStmt
//
// @ingroup sir_proto
message VarDeclStmtData {
  google.protobuf.Int32Value accessID = 1; // ID of the variable declared in the statement
}

// @brief Declaration of a variable
//
// Synopsis
// @code{.cpp}
// Type name[dimension] op init_list
// @endcode
//
// @b Example
// In the following C++ expression:
//
// @code{.cpp}
//  double foo[2] = {2.3, 5.3};
// @endcode
//
// the members of `VarDeclStmt` would be:
//
// @code{.cpp}
//  - type: Float
//  - name: "foo"
//  - dimension: 2
//  - op: "="
//  - init_list: {LiteralAccessExpr{"2.3"}, LiteralAccessExpr{"5.3"}}
// @endcode
//
// @ingroup sir_proto
message VarDeclStmt {
  Type type = 1;       // Type of the variable
  string name = 2;     // Name of the variable
  int32 dimension = 3; // Dimension of the array or 0 for variables
  string op = 4;       // Operation used for initialization

  // List of expression used for array initialization or just 1 element for variable initialization
  repeated Expr init_list = 5;

  SourceLocation loc = 6;                 // Source location
  StmtData data = 7;                      // Generic Stmt's data container
  VarDeclStmtData var_decl_stmt_data = 8; // Data of this statement
  int32 ID = 9;                           // ID of the Stmt
}

// @brief Declaration of a vertical region
//
// @ingroup sir_proto
message VerticalRegionDeclStmt {
  VerticalRegion vertical_region = 1;
  SourceLocation loc = 2; // Source location
  StmtData data = 3;      // Generic Stmt's data container
  int32 ID = 4;           // ID of the Stmt
}

// @brief Declaration of a stencil call
//
// @ingroup sir_proto
message StencilCallDeclStmt {
  StencilCall stencil_call = 1;
  SourceLocation loc = 2; // Source location
  StmtData data = 3;      // Generic Stmt's data container
  int32 ID = 4;           // ID of the Stmt
}

// @brief Declaration of a boundary condition
//
// @ingroup sir_proto
message BoundaryConditionDeclStmt {
  string functor = 1;         // Identifier of the boundary condition functor
  repeated string fields = 2; // List of field arguments to apply the functor to
  SourceLocation loc = 3;     // Source location
  StmtData data = 4;          // Generic Stmt's data container
  int32 ID = 5;               // ID of the Stmt
}

// @brief Represent an if/then/else block
//
// Synopsis
// @code{.cpp}
//  if(cond_part)
//    then_part
//  else
//    else_part
// @endcode
//
// @ingroup sir_proto
message IfStmt {
  Stmt cond_part = 1;     // Condition (needs to be an `ExprStmt`)
  Stmt then_part = 2;     // Then part
  Stmt else_part = 3;     // Else part (can be empty)
  SourceLocation loc = 4; // Source location
  StmtData data = 5;      // Generic Stmt's data container
  int32 ID = 6;           // ID of the Stmt
}

// @brief Apply the unary operations to an expression
//
// Synopsis
// @code{.cpp}
//  op operand
// @endcode
// @ingroup sir_proto
message UnaryOperator {
  string op = 1;          // Operation (e.g "+" or "-")
  Expr operand = 2;       // Expression to apply the operation
  SourceLocation loc = 3; // Source location
  int32 ID = 4;           // ID of the Expr
}

// @brief Apply a binary operation to `left` and `right`
//
// Synopsis
// @code{.cpp}
//  left op right
// @endcode
// @ingroup sir_proto
message BinaryOperator {
  Expr left = 1;          // Left-hand side
  string op = 2;          // Operation (e.g "+" or "-")
  Expr right = 3;         // Right-hand side
  SourceLocation loc = 4; // Source location
  int32 ID = 5;           // ID of the Expr
}

// @brief Assignment operator
//
// Synopsis
// @code{.cpp}
//  left = right
// @endcode
// @ingroup sir_proto
message AssignmentExpr {
  Expr left = 1;          // Left-hand side
  string op = 2;          // Operation (e.g "=" or "+=")
  Expr right = 3;         // Right-hand side
  SourceLocation loc = 4; // Source location
  int32 ID = 5;           // ID of the Expr
}

// @brief Apply a ternary operation
//
// Synopsis
// @code{.cpp}
//  cond ? left : right
// @endcode
// @ingroup sir_proto
message TernaryOperator {
  Expr cond = 1;          // Condition
  Expr left = 2;          // Left-hand side
  Expr right = 3;         // Right-hand side
  SourceLocation loc = 4; // Source location
  int32 ID = 5;           // ID of the Expr
}

// @brief Function call expression
//
// Synopsis
// @code{.cpp}
//  callee(arg0, ..., argN)
// @endcode
// @ingroup sir_proto
message FunCallExpr {
  string callee = 1;           // Identifier of the function (i.e callee)
  repeated Expr arguments = 2; // List of arguments
  SourceLocation loc = 3;      // Source location
  int32 ID = 4;                // ID of the Expr
}

// @brief Stencil function call expression
//
// Synopsis
// @code{.cpp}
//  callee(arg0, ..., argN)
// @endcode
// @ingroup sir_proto
message StencilFunCallExpr {
  string callee = 1;           // Identifier of the stencil function (i.e callee)
  repeated Expr arguments = 2; // List of arguments
  SourceLocation loc = 3;      // Source location
  int32 ID = 4;                // ID of the Expr
}

// @brief Stencil function argument
//
// A stencil function argument can be a simple dimension (e.g `i`), an offset (e.g `i+1`) or
// reference an argument of a stencil functions if the current stencil function is called within the
// scope of another stencil function (nested calls).
//
// @ingroup sir_proto
message StencilFunArgExpr {
  // Dimension of the argument
  Dimension dimension = 1;

  // Offset to the dimension
  int32 offset = 2;

  // Index of the argument of the stencil function in the outer scope. If unused, the value *has* to
  // be set to -1.
  //
  // @b Example:
  //
  // The following example shows the usage of `argument_index`. Imagine the following scenario:
  // @code{.cpp}
  //   foo(storage a, dimension dir) {
  //      bar(dir+1, a);
  //   }
  // @endcode
  //
  // in which the members of `StencilFunArgExpr` for the argument `dir+1` of `bar` would be:
  //
  // @code{.cpp}
  //  - dimension: -1        // We do not know the dimension yet as it depends on `dir` of `foo`
  //  - offset: +1           // Whatever `dir` will be, we offset it by `+1`
  //  - argument_index: 1    // We reference the second argument `dir` of `foo` thus assign
  //                         // the index 1 as we use a 0 based indexing.
  // @endcode
  int32 argument_index = 3;

  // Source location
  SourceLocation loc = 4;

  // ID of the Expr
  int32 ID = 5;
}

// @brief Data of an access expression
//
// @ingroup sir_proto
message AccessExprData {
  google.protobuf.Int32Value accessID = 1; // Access ID of variable/literal/field accessed
}

// @brief Access to a variable
//
// @ingroup sir_proto
message VarAccessExpr {
  string name = 1;         // Name of the variable
  Expr index = 2;          // Is it an array access (i.e var[2])?
  bool is_external = 3;    // Is this an access to a external variable (e.g a global)?
  SourceLocation loc = 4;  // Source location
  AccessExprData data = 5; // Access data
  int32 ID = 6;            // ID of the Expr
}

message CartesianOffset {
  int32 i_offset = 1;
  int32 j_offset = 2;
}
message UnstructuredOffset { bool has_offset = 1; }
message ZeroOffset {}

// @brief Access to a field
//
// @ingroup sir_proto
message FieldAccessExpr {
  // Name of the field
  string name = 1;
  //

  // Static offsets
  //
  // This represent the offset which are know before instantiationg the stencil function. Meaning,
  // if we have directional or offset arguments, we have to perform a lazy evaluation to compute
  // the real offset once we know the mapping of the directions (and offsets) to the actual
  // arguments of the stencil function.
  int32 vertical_offset = 2;
  oneof horizontal_offset {
    CartesianOffset cartesian_offset = 3;
    UnstructuredOffset unstructured_offset = 4;
    ZeroOffset zero_offset = 5;
  }

  // Mapping of the directional and offset arguments of the stencil function.
  //
  // The `argumentMap` stores an index to the argument list of the stencil function with -1
  // indicating this argument is unused. The `argumentOffset` holds the parsed offsets of the
  // direction (or offset).
  //
  // @b Example:
  // Consider the following example which implements an average stencil function :
  //
  // @code{.cpp}
  // avg(storage in, direction dir) {
  //    return (in(dir+2) + in) / 2.0;
  //  }
  // @endcode
  //
  // The `in(dir+2)` FieldAccessExpr would have the following members:
  //
  // @code{.cpp}
  //  - name           : "in"
  //  - offset         : {0, 0, 0}     // We don't have any i,j or k accesses
  //  - argumentMap    : {1, -1, -1}   // `dir` maps to the 1st argument of `avg` (0 based)
  //  - argumentOffset : {2, 0, 0}     // `dir+2` has an offset `+2`
  // @endcode
  repeated int32 argument_map = 6;

  // @see argument_map
  repeated int32 argument_offset = 7;

  // Negate the offset (this allows writing `in(-off)`)
  bool negate_offset = 8;

  // Source location
  SourceLocation loc = 9;

  // Access data
  AccessExprData data = 10;

  // ID of the Expr
  int32 ID = 11;
}

// @brief Access of a literal
//
// @ingroup sir_proto
message LiteralAccessExpr {
  string value = 1;        // Value of the literal (e.g "1.24324")
  BuiltinType type = 2;    // Type of the literal
  SourceLocation loc = 3;  // Source location
  AccessExprData data = 4; // Access data
  int32 ID = 5;            // ID of the Expr
}

// @brief A weight needed in the weighted reduction on unstrcutred stencils, which is consistent with
//        the Value class for globals
//
// @ingroup sir_proto
message Weight {
  oneof Value {
    bool boolean_value = 1;
    int32 integer_value = 2;
    double double_value = 3;
    string string_value = 4;
    float float_value = 5;
  }
}

// @brief Reduction operation over neighbors
//
// @ingroup sir_proto
message ReductionOverNeighborExpr {
  string op = 1;               // Reduction operation
  Expr rhs = 2;                // Operation to be applied for each neighbor
  Expr init = 3;               // Initial value of reduction
  repeated Weight weights = 4; // weights (required to be of equal type, e.g. just floats)
  dawn.proto.enums.LocationType lhs_location = 5;
  dawn.proto.enums.LocationType rhs_location = 6;
  SourceLocation loc = 7;
}

// @brief Abstract syntax tree of the SIR
//
// @ingroup sir_proto
message AST {
  Stmt root = 1; // Root node
}
