/*===------------------------------------------------------------------------------*- proto -*-===*\
 *                          _
 *                         | |
 *                       __| | __ ___      ___ ___
 *                      / _` |/ _` \ \ /\ / / '_  |
 *                     | (_| | (_| |\ V  V /| | | |
 *                      \__,_|\__,_| \_/\_/ |_| |_| - Compiler Toolchain
 *
 *
 *  This file is distributed under the MIT License (MIT).
 *  See LICENSE.txt for details.
 *
\*===------------------------------------------------------------------------------------------===*/

// @defgroup sir_proto SIR protobuf
// @brief This is a SIR description using Google's protocol buffers library
// <a href="https://developers.google.com/protocol-buffers/">Protobuf</a>.

syntax = "proto3";

package dawn.sir.proto;
import "SIR/statements.proto";
import "SIR/enums.proto";

option java_package = "dawn.sir";
option java_outer_classname = "SIR_pb2";

/*===------------------------------------------------------------------------------------------===*\
 *     Stencil
\*===------------------------------------------------------------------------------------------===*/

// @brief Stencil description of the SIR
//
// A stencil represents the executation of a series of statements on a finite number of input fields
// producing a finite number of output fields, hence a stencilcan have multiple output fields.
// Hence, a stencil is described by an AST and a list of participating Field(s).
//
// @ingroup sir_proto
message Stencil {
  // Name of the stencil
  string name = 3;

  // Source location of the stencil
  dawn.proto.statements.SourceLocation loc = 4;

  // Stencil description AST
  dawn.proto.statements.AST ast = 1;

  // Fields referenced by this stencil
  repeated dawn.proto.statements.Field fields = 2;
}

/*===------------------------------------------------------------------------------------------===*\
 *     StencilFunction
\*===------------------------------------------------------------------------------------------===*/

// @brief Stencil function description of the SIR
//
// Stencil functions are represented, like stencils, by a unique identifier, a list of arguments
// and a list vertical intervals and coressponding AST(s). The latter allows to *specialize* the
// stencil function for a specific vertical interval enabling straight-forward incorporation of
// vertical boundary conditions. Next to simple field and scalar arguments, stencil functions can be
// parametrized on Direction `(i, j or k)` and Offset `(i+1) arguments.
//
// @ingroup sir_proto
message StencilFunction {
  // Name of the stencil function
  string name = 5;

  // Source location of the stencil function
  dawn.proto.statements.SourceLocation loc = 4;

  // Stencil body ASTs
  repeated dawn.proto.statements.AST asts = 1;

  // Associated intervals of the AST
  repeated dawn.proto.statements.Interval intervals = 2;

  // Fields referenced by this stencil
  repeated dawn.proto.statements.StencilFunctionArg arguments = 3;
}

/*===------------------------------------------------------------------------------------------===*\
 *     GlobalVariableMap
\*===------------------------------------------------------------------------------------------===*/

// @brief Value of a global variable
message GlobalVariableValue {
  // Type and value of the variable
  oneof Value {
    bool boolean_value = 1;
    int32 integer_value = 2;
    double double_value = 3;
    string string_value = 4;
  }

  // Is the value a a compile time constant?
  bool is_constexpr = 5;
}

// @brief Map of global variables
//
// The support of global variables is essential for scientific models to store switches to
// control the flow of the execution, like the order of the horizontal advection, or simulation
// parameters such as the time step of the model. A global variable is identified by a unique
// name and a value which can either be set statically at compile time or dynamically at run
// time.
//
// @ingroup sir_proto
message GlobalVariableMap {
  map<string, GlobalVariableValue> map = 1; // Mape of global variables (name to value)
}

/*===------------------------------------------------------------------------------------------===*\
 *     SIR
\*===------------------------------------------------------------------------------------------===*/

// @brief Protobuf description of the SIR
//
// The Stencil Intermediate Representation (SIR) allows to define multiple high level DSLs in a
// lightweight manner by reusing most of the complex toolchain i.e the Dawn library.
//
// @ingroup sir_proto
message SIR {

  dawn.proto.enums.GridType gridType = 1;

  // Name of the file the SIR was parsed from (can be empty)
  string filename = 2;

  // List of stencils
  repeated Stencil stencils = 3;

  // List of stencil functions
  repeated StencilFunction stencil_functions = 4;

  // Map of global variables
  GlobalVariableMap global_variables = 5;
}
