/*===------------------------------------------------------------------------------*- proto -*-===*\
 *                          _
 *                         | |
 *                       __| | __ ___      ___ ___
 *                      / _` |/ _` \ \ /\ / / '_  |
 *                     | (_| | (_| |\ V  V /| | | |
 *                      \__,_|\__,_| \_/\_/ |_| |_| - Compiler Toolchain
 *
 *
 *  This file is distributed under the MIT License (MIT).
 *  See LICENSE.txt for details.
 *
\*===------------------------------------------------------------------------------------------===*/

// @defgroup iir_proto IIR protobuf
// @brief This is a IIR description for Google's protocol buffers library
// <a href="https://developers.google.com/protocol-buffers/">Protobuf</a>.

syntax = "proto3";

package dawn.proto.iir;
import "SIR/statements.proto";
import "SIR/enums.proto";

/* ===-----------------------------------------------------------------------------------------===*/
//      Caches
/* ===-----------------------------------------------------------------------------------------===*/
message Window {
    int32 minus = 1;
    int32 plus = 2;
}

/// @brief Cache specification of cuda kernels (also used in Gridtools)
message Cache {
    // Available cache types
    enum CacheType { CT_IJ = 0; CT_K = 1; CT_IJK = 2; CT_Bypass = 3; }

    // IO policies of the cache
    enum CachePolicy { CP_Unknown = 0; CP_FillFlush = 1; CP_Fill = 2; CP_Flush = 3; CP_EPFlush = 4;
                       CP_BPFill = 5; CP_Local = 6; }
    // Used Cache-Type
    CacheType type = 1;

    // Used IO-policy of the cace
    CachePolicy policy = 2;

    // Field-ID of the cached field
    int32 accessID = 3;

    // optional field: Interval on which cache is used
    dawn.proto.statements.Interval interval = 4;

    // optional field: Interval that is the union of all the accessIntervals
    dawn.proto.statements.Interval enclosingAccessInterval = 5;

    // optional field: Window on which we need to fill and flush
    Window cacheWindow = 6;
}

/* ===-----------------------------------------------------------------------------------------===*/
//      IIR-Tree
/* ===-----------------------------------------------------------------------------------------===*/

// @brief The Protobuf description of all the required members to describe a DoMethod of the IIR
//
// A Do-method contains an AST (BlockStmt) of a specific vertical region
message DoMethod {
    dawn.proto.statements.Stmt ast = 1; // ast is of type BlockStmt
    int32 doMethodID = 2;
    dawn.proto.statements.Interval interval = 3;
}

// @brief The Protobuf description of all the required members to describe a Stage of the IIR
//
// A Stage usually corresponds to a inner loop nest (usually an ij-loop). In CUDA gridtools stages
// are separated by a `__syncthreads()` call in a kernel.
message Stage {
    repeated DoMethod doMethods = 1;
    int32 stageID = 2;

}

// @brief The Protobuf description of all the required members to describe a MultiStage of the IIR
//
// A multistage usually corresponds to the outer loop (usually over k) of the loop nest. In CUDA
// multistages reflect kernels.
message MultiStage {
  enum LoopOrder { Forward = 0; Backward = 1;  Parallel = 2;}

    // The stages of the MultiStage
    repeated Stage stages = 1;

    // The loop-order in which the stage has to be executed (for-loop is start : end or end : start)
    LoopOrder loopOrder = 2;

    // The unique ID of the MultiStage
    int32 multiStageID = 3;

    // The set of Cached variables.
    // This is part of the optimization and can be serialized if need be but the optimizer has a
    // mechanism in place to set caches if none are provided
    map<int32, Cache> Caches = 4;
}

// @brief The Protobuf description of the Attirbutes that are part of a Stencil
//
// The attributes are set via pragmas in the usercode (#pragma gtclang ...) and are held by the IIR
// Stencil one integer
message Attributes {
    enum StencilAttributes { NoCodeGen = 0; MergeStages = 1; MergeDoMethods = 2;
                             MergeTemporaries = 3; UseKCaches = 4;}
        repeated StencilAttributes attributes = 1;
}

// @brief The Protobuf description of all the required members to describe a Stencil of the IIR
//
// A Stencil is represented by a collection of MultiStages. User Stencils can be broken up into
// multiple stencils if necessary.
message Stencil {
    repeated MultiStage multiStages = 1;
    int32 stencilID = 2;
    Attributes attr = 3;
}

message BoundaryConditionFunctor {
    string name = 1;
    repeated string args = 2;
    dawn.proto.statements.Stmt ASTStmt = 3;
}

// @brief The Protobuf description of the root node of the IIR
//
// The root node of the tree, holding multiple stencils. There is one IIR object for each user
// defined Stencil.
message IIR {
    dawn.proto.enums.GridType gridType = 1;

    // Map of the globally defined variable names to their Values
    map<string, GlobalValueAndType> globalVariableToValue = 2;

    repeated Stencil stencils = 3;

    // Stencil description statements for the overall program flow
    repeated dawn.proto.statements.Stmt controlFlowStatements = 4;

    repeated BoundaryConditionFunctor boundaryConditions = 5;
}

/* ===-----------------------------------------------------------------------------------------===*/
//      Stencil-Metadata
/* ===-----------------------------------------------------------------------------------------===*/

// @brief Helper Structure to hold all the relevant information for field-versioning
//
// This array specifies all the access ID's of all the field versions that correspond to an a
// specific original field
message AllVersionedFields {
    repeated int32 allIDs = 1;
}

// @brief Stucrute that holds all the information about the automatic field verisoning
message VariableVersions {
    // The map from the original field ID to the list of all it's versions
    map<int32,  AllVersionedFields> variableVersionMap = 1;
}


// @brief Helper Strucute to make sure, Arrays with fixed length are not made too big
message Array3i {
    int32 int1 = 1;
    int32 int2 = 2;
    int32 int3 = 3;
}

// @brief A simple representation of the sir::Value that can have multiple types
message GlobalValueAndType {
    enum TypeKind { Boolean = 0; Integer = 1; Double = 2; }
    TypeKind type = 1;

    // The value of the global Variable (if set), cast to double
    double value = 2;

    // This defines if the Value is set as we can have globals with no value which otherwise would
    // get assigned 0
    bool valueIsSet = 3;
}

// @brief all the MetaInformation that needs to be stored in addition the the tree of computational
// patterns to be able to fully represent the usercode
message StencilMetaInfo {
    // Map from AccessID's to their original name
    map<int32, string> accessIDToName = 1;

    // Injection of AccessIDs of the access type
    map<int32, int32> accessIDToType = 2;

    // Injection of AccessIDs of literal constant to their respective name
    map<int32, string> literalIDToName = 3;

    // set of AccessIDs which correspond to fields for identification as such
    repeated int32 fieldAccessIDs = 4;

    // Ordered list of IDs of fields that belong to the user API call of the program
    repeated int32 APIFieldIDs = 5;

    // AccessIDs of fields which are represented by a temporary storages
    repeated int32 temporaryFieldIDs = 6;

    // AccessIDs of "global variable" accesses
    repeated int32 globalVariableIDs = 7;

    // Strucutue for all the fieldversioning information
    VariableVersions versionedFields = 8;

    // Map of field names to their respective Boundary Condition
    map<string, dawn.proto.statements.Stmt> fieldnameToBoundaryCondition = 9;

    // Map of field ID's to the user-specified dimensions
    map<int32, dawn.proto.statements.FieldDimensions> fieldIDtoDimensions = 10;

    // Map of the StencilID's to their respective StencilCall
    map<int32, dawn.proto.statements.Stmt> idToStencilCall = 11;

    // Map of the BoundaryConditionCall to its extent
    map<int32, dawn.proto.statements.Extents> boundaryCallToExtent = 12;

    // AccessIDs of allocated fields
    repeated int32 allocatedFieldIDs = 13;

    // The source-location of the stencil (for better error-handeling)
    dawn.proto.statements.SourceLocation stencilLocation = 14;

    // The user-given name of the stencil
    // (remember the 1-1 mapping of user-stencil - StencilInstantiation)
    string stencilName = 15;
}

/* ===-----------------------------------------------------------------------------------------===*/
//      StencilInstantiation
/* ===-----------------------------------------------------------------------------------------===*/

// The internal representation of a user Stencil
message StencilInstantiation {
    // All the non-recoverable information about the stencil not stored in the compuatational tree
    StencilMetaInfo metadata = 1;

    // The representataion of the computational patterns of the user stencil
    IIR internalIR = 2;

    // The filename of the original file creating the StencilInstantiation
    string filename = 3;
}
