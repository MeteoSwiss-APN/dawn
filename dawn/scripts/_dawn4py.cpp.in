#include "dawn/SIR/SIR.h"
#include "dawn/IIR/StencilInstantiation.h"

#include "dawn/Serialization/SIRSerializer.h"
#include "dawn/Serialization/IIRSerializer.h"

#include "dawn/Compiler/Driver.h"
#include "dawn/CodeGen/Driver.h"

#include <string>
#include <list>
#include <map>

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = ::pybind11;

PYBIND11_MODULE(_dawn4py, m) {
  m.doc() = "Dawn DSL toolchain"; // optional module docstring

  // Enumerations
  {{ SIRSerializerFormat }}
  {{ IIRSerializerFormat }}

  {{ PassGroup }}
  {{ CodeGenBackend }}

  {{ LogLevel }}

  // Options structs
  {{ OptimizerOptions }}
  {{ CodeGenOptions }}

  m.def("default_pass_groups", &dawn::defaultPassGroups,
        "Return a list of default optimizer pass groups");

  m.def("set_verbosity", &dawn::log::setVerbosity,
        "Set the dawn logging level [default: LogLevel::Warnings]",
        py::arg("level") = dawn::log::Level::Warnings);

  m.def("run_optimizer_sir", [](const std::string& sir,
      dawn::SIRSerializer::Format format,
      const std::list<dawn::PassGroup>& groups,
      const dawn::Options& options) {
        return dawn::run(sir, format, groups, options);
    },
    "Lower the stencil IR to a stencil instantiation map and (optionally) run optimization passes.",
    "A list of default optimization passes is returned from default_pass_groups().",
    py::arg("sir"),
    py::arg("format") = dawn::SIRSerializer::Format::Byte,
    py::arg("groups") = std::list<dawn::PassGroup>(),
    py::arg("options") = dawn::Options()
  );

  m.def("run_optimizer_iir", [](const std::map<std::string, std::string>& stencilInstantiationMap,
      dawn::IIRSerializer::Format format,
      const std::list<dawn::PassGroup>& groups,
      const dawn::Options& options) {
        return dawn::run(stencilInstantiationMap, format, groups, options);
    },
    "Optimize the stencil instantiation map.",
    "A list of default optimization passes is returned from default_pass_groups().",
    py::arg("stencil_instantiation_map"),
    py::arg("format") = dawn::IIRSerializer::Format::Byte,
    py::arg("groups") = std::list<dawn::PassGroup>(),
    py::arg("options") = dawn::Options()
  );

  m.def("run_codegen", [](const std::map<std::string, std::string>& stencilInstantiationMap,
      dawn::IIRSerializer::Format format,
      dawn::codegen::Backend backend,
      const dawn::codegen::Options& options) {
        return dawn::codegen::run(stencilInstantiationMap, format, backend, options);
    },
    "Generate code from the stencil instantiation map.",
    py::arg("stencil_instantiation_map"),
    py::arg("format") = dawn::IIRSerializer::Format::Byte,
    py::arg("backend") = dawn::codegen::Backend::GridTools,
    py::arg("options") = dawn::codegen::Options()
  );

  m.def("compile_sir", [](const std::string& sir, dawn::SIRSerializer::Format format,
      const std::list<dawn::PassGroup>& groups, const dawn::Options& optimizerOptions,
      dawn::codegen::Backend backend, const dawn::codegen::Options& codegenOptions) {
        return dawn::compile(sir, format, groups, optimizerOptions, backend, codegenOptions);
    },
    "Compile the stencil IR: lower, optimize, and generate code.",
    "Runs the default_pass_groups() unless the 'groups' argument is passed.",
    py::arg("sir"),
    py::arg("format") = dawn::SIRSerializer::Format::Byte,
    py::arg("groups") = dawn::defaultPassGroups(),
    py::arg("optimizer_options") = dawn::Options(),
    py::arg("backend") = dawn::codegen::Backend::GridTools,
    py::arg("codegen_options") = dawn::codegen::Options()
  );
}
