#include "dawn/Optimizer/Options.h"
#include "dawn/Compiler/Driver.h"

#include "dawn/CodeGen/Driver.h"
#include "dawn/CodeGen/Options.h"

#include "dawn/SIR/SIR.h"
#include "dawn/IIR/StencilInstantiation.h"

#include "dawn/Serialization/SIRSerializer.h"
#include "dawn/Serialization/IIRSerializer.h"

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

#include <sstream>
#include <string>

namespace py = ::pybind11;

PYBIND11_MODULE(_dawn4py, m) {
  m.doc() = "Dawn DSL toolchain"; // optional module docstring

  // Enumerations
  {{ SIRSerializerFormat }}
  {{ IIRSerializerFormat }}

  {{ PassGroup }}
  {{ CodegenBackend }}

  // Options structs
  m.def("default_pass_groups", &dawn::defaultPassGroups,
        "Return a list of default optimizer pass groups");

  m.def("run_optimizer_sir", [](const std::string& sir,
                                dawn::SIRSerializer::Format format,
                                const std::list<dawn::PassGroup>& groups
                                {{ dawn::Options:CppArgs }}) -> std::map<std::string, std::string> {
      auto stencilIR = dawn::SIRSerializer::deserializeFromString(sir, format);
      dawn::Options options{ {{ dawn::Options:VarList }} };
      auto optimizedSIM = dawn::run(stencilIR, groups, options);
      std::map<std::string, std::string> instantiationStringMap;
      const dawn::IIRSerializer::Format outputFormat =
        format == dawn::SIRSerializer::Format::Byte
           ? dawn::IIRSerializer::Format::Byte : dawn::IIRSerializer::Format::Json;
      for(auto [name, instantiation] : optimizedSIM) {
        instantiationStringMap.insert(
            std::make_pair(name, dawn::IIRSerializer::serializeToString(instantiation, outputFormat)));
      }
      return instantiationStringMap;
    },
    "Lower the stencil IR to a stencil instantiation map and run optimization passes",
    py::arg("sir"),
    py::arg("format") = dawn::SIRSerializer::Format::Byte,
    py::arg("groups") = std::list<dawn::PassGroup>()
    {{ dawn::Options:PyArgs }}
  );

  m.def("run_optimizer_iir", [](const std::map<std::string, std::string>& stencilInstantiationMap,
                                dawn::IIRSerializer::Format format,
                                const std::list<dawn::PassGroup>& groups
                                {{ dawn::Options:CppArgs }}) {
      std::map<std::string, std::shared_ptr<dawn::iir::StencilInstantiation>> internalMap;
      for(auto [name, instStr] : stencilInstantiationMap) {
        internalMap.insert(std::make_pair(name, dawn::IIRSerializer::deserializeFromString(instStr, format)));
      }
      dawn::Options options{ {{ dawn::Options:VarList }} };
      auto optimizedSIM = dawn::run(internalMap, groups, options);
      std::map<std::string, std::string> instantiationStringMap;
      for(auto [name, instantiation] : optimizedSIM) {
        instantiationStringMap.insert(
            std::make_pair(name, dawn::IIRSerializer::serializeToString(instantiation, format)));
      }
      return instantiationStringMap;
    },
    "Optimize the stencil instantiation map",
    py::arg("stencil_instantiation_map"),
    py::arg("format") = dawn::IIRSerializer::Format::Byte,
    py::arg("groups") = std::list<dawn::PassGroup>()
    {{ dawn::Options:PyArgs }}
  );

  m.def("run_codegen", [](const std::map<std::string, std::string>& stencilInstantiationMap,
                          dawn::IIRSerializer::Format format,
                          dawn::codegen::Backend backend
                          {{ dawn::codegen::Options:CppArgs }}) {
      std::map<std::string, std::shared_ptr<dawn::iir::StencilInstantiation>> internalMap;
      for(auto [name, instStr] : stencilInstantiationMap) {
        internalMap.insert(
            std::make_pair(name, dawn::IIRSerializer::deserializeFromString(instStr, format)));
      }
      dawn::codegen::Options options{ {{ dawn::codegen::Options:VarList }} };
      return dawn::codegen::generate(dawn::codegen::run(internalMap, backend, options));
    },
    "Generate code from the stencil instantiation map",
    py::arg("stencil_instantiation_map"),
    py::arg("format") = dawn::IIRSerializer::Format::Byte,
    py::arg("backend") = dawn::codegen::Backend::GridTools
    {{ dawn::codegen::Options:PyArgs }}
  );

  m.def("compile_sir", [](const std::string& sir,
                          dawn::SIRSerializer::Format format,
                          const std::list<dawn::PassGroup>& passGroups,
                          dawn::codegen::Backend backend
                          {{ dawn::Options:CppArgs }}
                          {{ dawn::codegen::Options:CppArgs }}) {
      auto stencilIR = dawn::SIRSerializer::deserializeFromString(sir, format);
      dawn::Options optimizerOptions{ {{ dawn::Options:VarList }} };
      auto optimizedSIM = dawn::run(stencilIR, passGroups, optimizerOptions);
      dawn::codegen::Options codegenOptions{ {{ dawn::codegen::Options:VarList }} };
      return dawn::codegen::generate(dawn::codegen::run(optimizedSIM, backend, codegenOptions));
    },
    "Compile the stencil IR: lower, optimize, and generate code",
    py::arg("sir"),
    py::arg("format") = dawn::SIRSerializer::Format::Byte,
    py::arg("optimizer_groups") = dawn::defaultPassGroups(),
    py::arg("codegen_backend") = dawn::codegen::Backend::GridTools
    {{ dawn::Options:PyArgs }}
    {{ dawn::codegen::Options:PyArgs }}
  );
}
